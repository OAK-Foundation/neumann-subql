type Account @entity {
  id: ID!
  freeBalance: BigInt
  reserveBalance: BigInt
  totalBalance: BigInt
  atBlock: BigInt!
}

type AccountSnapshot @entity {
  "id"
  id: ID!

  accountId: String!
  snapshotAtBlock: BigInt!
  freeBalance: BigInt!
  reserveBalance: BigInt!
  totalBalance: BigInt!
}

type Endowed @entity {
  id: ID!

  blockNumber: BigInt
  accountId: String!
  freeBalance: BigInt
  reserveBalance: BigInt
  totalBalance: BigInt
  timestamp: Date
}
type Transfer @entity {
  id: ID!
  blockNumber: BigInt

  toAccountId: String!
  fromAccountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type BalanceSet @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type Deposit @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type Reserved @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type Unreserved @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type Withdraw @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type Slash @entity {
  id: ID!
  blockNumber: BigInt
  accountId: String!
  balanceChange: BigInt
  timestamp: Date
}

type ReservRepatriated @entity {
  id: ID!
  blockNumber: BigInt
  toAccountId: String!
  fromAccountId: String!
  status: String
  balanceChange: BigInt
  timestamp: Date
}

type Event @entity {
  id: ID!
  blockHeight: BigInt!
  idx: Int!
  module: String! @index
  method: String! @index
  docs: String!
  data: Args
  extrinsic: Extrinsic
  timestamp: Date! @index
  block: Block
}

type Extrinsic @entity {
  id: ID!

  blockHeight: BigInt! @index
  idx: Int!
  module: String! @index
  method: String! @index
  success: Boolean!
  args: Args
  events: [Event] @derivedFrom(field: "extrinsic")
  timestamp: Date!

  txHash: String!
  fromAccount: Account
}

type Args @jsonField {
  placeholder: String
}

type Block @entity {
  id: ID!
  hash: String!
  height: BigInt!
  specVersion: Int!
  timestamp: Date!
  weight: BigInt!
  events: [Event] @derivedFrom(field:"block")

  collator: Account @index
  stateRoot: String
  extrinsicsRoot: String
}

type Task @entity {
  id: ID!
  blockHeight: BigInt! @index
  event: Event!
  extrinsic: Extrinsic
  timestamp: Date!
  status: String @index
  completed_at: Date
  cancelled_at : Date

  # The are the desire parameter that user set, for Recurring tasks, scheduled_end_at is unknow
  scheduled_start_at: Date
  scheduled_end_at: Date

  creator: Account!
}

type TaskEvent @entity {
  id: ID!
  blockHeight: BigInt! @index
  idx: Int!
  module: String! @index
  method: String! @index
  event: Event!
  extrinsic: Extrinsic
  task: Task!
  timestamp: Date!
}

type Collator @entity {
  id: ID! # Collator address
  joinedDate: Date!
}

type ValidatorThreshold @entity {
  # era index
  id: ID!

  startBlock: Int! @index(unique: true)

  timestamp: Date! @index(unique: true)

  validatorWithLeastBond: String

  leastStaked: BigInt

  totalStaked: BigInt

  maxNominatorRewardedPerValidator: Int

  totalValidators: Int
}